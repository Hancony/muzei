/*
 * Copyright 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.dokka.gradle.DokkaTask

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

Properties versionProps = new Properties()
versionProps.load(new FileInputStream(file('../version.properties')))

group = 'com.google.android.apps.muzei'
version = versionProps['apiName']


Properties props = new Properties()
props.load(new FileInputStream(file('../local.properties')))

allprojects { ext."signing.keyId" = props["signing.keyId"] }
allprojects { ext."signing.password" = props["signing.password"] }
allprojects { ext."signing.secretKeyRingFile" = props["signing.secretKeyRingFile"] }

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    // Use the minimum value needed to avoid forcing apps to upgrade
    //noinspection GradleDependency,KtxExtensionAvailable
    api "androidx.core:core:1.1.0"
    implementation "androidx.exifinterface:exifinterface:1.3.3"
}
android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion rootProject.ext.targetSdkVersion

        def apiVersion = versionProps['apiCode'].toInteger()
        manifestPlaceholders = [api_version: apiVersion]
        buildConfigField "int", "API_VERSION", "${apiVersion}"

        buildConfigField "String", "CHOOSE_PROVIDER_URI_PREFIX", "\"muzei://sources/\""
    }

    buildTypes {
        publicBeta
        publicDebug
    }

    kotlinOptions {
        freeCompilerArgs += "-Xexplicit-api=strict"
    }
}

tasks.withType(DokkaTask).configureEach {
    dokkaSourceSets {
        named("main") {
            if (it.name.contains("androidTest")) {
                suppress.set(true)
            }

            externalDocumentationLink {
                url.set(new URL("https://developer.android.com/reference/"))
                packageListUrl.set(new URL("https://developer.android.com/reference/androidx/package-list"))
            }

            perPackageOption {
                matchingRegex.set(".*\\.internal.*")
                suppress.set(true)
            }

            // Add module and package level documentation
            includes.from(files("module.md", "package.md"))
        }
    }
}

dokkaHtml.configure {
    doLast {
        copy {
            from "dokka-override"
            into new File(outputDirectory.get(), "styles")
            include "style.css"
        }
        copy {
            from "dokka-override"
            into new File(outputDirectory.get(), "images")
            include "docs_logo.svg", "logo-icon.svg"
        }
    }
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    setArchiveClassifier('javadoc')
    from dokkaJavadoc.outputDirectory
}

task sourcesJar(type: Jar) {
    setArchiveClassifier('sources')
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign publishing.publications
}
afterEvaluate {
    publishing {
        repositories {
            maven {
                name = "sonatype"

                def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username props["sonatypeUsername"]
                    password props["sonatypePassword"]
                }
            }
        }

        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocJar

                pom {
                    name = 'Muzei API'
                    description = 'The Muzei API allows you to extend Muzei with custom sources'
                    url = 'https://api.muzei.co'

                    scm {
                        url = 'https://github.com/muzei/muzei.git'
                        connection = 'scm:git:https://github.com/muzei/muzei'
                        developerConnection = 'scm:git:https://github.com/muzei/muzei'
                    }

                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }

                    developers {
                        developer {
                            id = 'romannurik'
                            name = 'Roman Nurik'
                        }
                    }
                }
            }
        }
    }
}
